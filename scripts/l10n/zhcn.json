{
  "lang_name": "简体中文",
  "translators": "<li> <a href=\"https://github.com/lixiang810\" >lixiang810</a></li>",
  "ui_index_title": "Langsorter / 语言大评测",
  "ui_index_text": "<h2>Langsorter 是什么？</h2><p>Langsorter 本质上是一个心理学测验，它将通过向你提出问题来得出一个与你的心灵最贴合的编程语言。这个测试将基于流程图模型，根据你对这些问题的回答，把<span id='ideo_length'></span>种不同编程语言之一分配给你。也许你能贴合一些你自己知道的语言！</p><h2>我不明白其中一个问题！</h2><p>这个测验是一个心灵测验，如果你有什么不懂的，跟着你的感觉走就行了。</p><h2>我不喜欢我被匹配到的编程语言！</h2><p>¯\\_(ツ)_/¯</p>",
  "ui_index_start": "点击开始",
  "ui_index_tree": "查看结果树",
  "ui_index_contacts": "作者",
  "ui_index_contact_info": "<p><a href=\"https://github.com/is-cau/Langsorter\">GitHub 页面</a></p>",
  "ui_quiz_title": "语言大测评",
  "ui_quiz_back": "后退",
  "ui_results_title": "语言大测评",
  "ui_results_back": "返回首页",
  "ui_results_credits": "贡献者",
  "question_model": "如果你的面前有一个巨大到你可能难以解决的难题即将来临，你是选择动手强硬地快速解决，还是看着时机船到桥头自然直？",
  "question_type": "如果你的面前其实是一头怪兽，你是想用一击毙命但位置不能射错的弓箭杀死它，还是想用灵活但不那么锋利的短剑杀死他？",
  "question_mop": "你数学和物理两科的成绩哪个高？",
  "question_eot": "你更喜欢工程还是理论？",
  "question_coin": "你之前打死的怪兽掉落金币了，你希望得到一个花纹繁复的传统古硬币还是花纹简洁更现代的新硬币。",
  "question_mbti": "如果你的面前有一个你喜欢的蛋糕，请问它的上表面是自由随性比较凹凸不平的，还是规则统一具有平滑光泽的？",
  "question_fruit": "如果你的面前有一个很可口的水果，你希望它来自于丰饶的黄金国度，还是神秘的桃花源中？",
  "question_fxxklang": "如果你一定会遇到一个你可能无法解决的难题，你希望这个难题是人为设计的谜题，还是现实中存在的疑难杂症？",
  "question_puzzle": "你希望这个难题在难题的等级中有多难？（也就是说在它已经是难题的情况下）",
  "ideo_free_python": "非工程化的 Python",
  "ideo_free_python_desc": "Python 是一个命令式的语言。若你不对其使用工程化的手段，它用起来和弱类型语言没有什么差别。以上两点分别对应你之前选择的选项。<br>Python 是非常流行的语言，以方便简洁易用著称，适合多种人群，社区活跃！",
  "ideo_cpp": "C++",
  "ideo_cpp_desc": "被广泛使用的 C++ （与现代 C++ 不同）是一个命令式的语言。虽然其也有类型系统辅助验证程序是否正确，但通常一言难尽。历史“悠久”，语法传统。相较于 C 语言的“纯净感”， C++ 能混用多种编程范式，代码风格随使用者不同而不同（易读性也是）。以上四点分别对应你之前选择的选项。<br>如信息学竞赛和学长祖传代码等，是这种语言出没的重点地区。其知名度非常广，更多资料你可以搜索得到！",
  "ideo_new_cpp": "现代 C++",
  "ideo_new_cpp_desc": "现代 C++ 与传统 C++ 有很大的差别。虽然你可以使用函数式编程，但其仍然以命令式为主。现代 C++ 有较为完善的类型系统可用于验证程序是否正确。由于需要手动管理内存，它通常用于编写偏底层的系统级应用。以上三点分别对应你之前选择的选项。<br>现在有一个叫 Rust 的语言正在尝试与其竞争，具有一定函数式风格和略显奇特的语法，与你的性格说不定也合得来。不论如何，只要是学习这类语言，你可能都要经历一段略显陡峭的学习曲线。现代 C++ 也是一个热门话题，更多资料你可以搜索得到！",
  "ideo_c": "C",
  "ideo_c_desc": "C 语言是一个命令式的语言。相较于它一言难尽的类型系统，程序员的代码水平在保证程序的正确性方面更加重要。它的历史非常悠久，语法也很经典传统。直到现在，它的语法风格也较为统一，不会如 C++ 一般出现各种奇葩的编程范式。以上四点分别对应你之前选择的选项。<br>其知名度非常广，更多资料你可以搜索得到！",
  "ideo_java": "Java",
  "ideo_java_desc": "Java 是一个命令式语言（不是不能写函数式代码，只是 Java 社区中的大多数人都认为 Java 的函数式不能用得太广，否则晦涩难懂）。 Java 同时还是比较严格的面向对象语言，意味着他的类型系统存在感很强，约束你的程序。它虽然发明是为了嵌入式等场景，但目前最广泛被应用的地方是网络工程，如网站和游戏的后端等，不论如何，它并不是一个很底层的语言。同一些新兴的语言相比，它的历史也较长，语法等方面唯美传统。以上四点分别对应你之前选择的选项。<br>其知名度非常广，更多资料你可以搜索得到！",
  "ideo_js": "JavaScript",
  "ideo_js_desc": "JS 是一个命令式和函数式兼有的语言，比较灵活。同时，与 TypeScript 不同，纯的 JS 是一个超级弱类型语言，各种有关 JS 类型系统的笑话满天飞，不过这也意味着如果你对自己的水平很自信的话， JS 能被你写得自由自在、无拘无束。虽然其被发明于互联网刚兴起时，但直到现在仍保持每年都更新，越来越现代。不论你写的是哪种环境的 JS ，你一份代码的整体风格都基本是统一的。以上四点分别对应你之前选择的选项。<br>其知名度非常广，更多资料你可以搜索得到！",
  "ideo_ts": "TypeScript",
  "ideo_ts_desc": "TypeScript 是 JavaScript 的改进版，这意味着 JS 所具有的命令式与函数式兼可使用、比较灵活的特点，在 TS 身上也都有。 TS 对 JS 的改进主要在提供了一个类型检查工具 <code>tsc</code> ，这意味着你可以选择被限制编写过于奔放、无视静态检查的代码，而写出准确、相对安全的代码。同其他范式灵活、强类型的语言相比， TS 是非常年轻、新潮的选择。如果你了解过 Rust ，它与 TS 在这些方面都很相似，除了—— Rust 更加底层，而 TS 某些程度更加抽象。以上四点分别对应你之前选择的选项。<br>如果你想要学习网络前端，设计网页、小程序等，越早与 TS 交朋友越好。如果你不喜欢前端，却得到了这个结果，你也可以试着了解用 TS 编写如 npm 包或命令行工具等与前端无关的东西。本身大多数人对 TS 的评价就是“编写很爽”，你也可以尝试一下，去<a href=\"https://www.typescriptlang.org/zh/\">他们的官网</a>了解一下，希望你能在其中得到快乐。",
  "ideo_go": "go",
  "ideo_go_desc": "go 语言包括其整体社区的风格都是非常朴实、偏向工程的，所以他和 C 语言一样更偏向命令式语言，像函数式这种过于学术气息的风味在它的身上基本找不到。为了工程开发时得到高质量、易读且准确的代码，它同时还是一个强类型语言，使用类型系统约束程序。为了工程开发的速度更快，错误更少，它也不需要你手动管理内存，而是把很多相关细节抽象起来，使你远离底层的约束。类似（但也不是很类似）定位的语言还有比较广为人知的 Java ，但 go 语言更加年轻，也更有活力。以上四点分别对应你之前选择的选项。<br>go 语言目前主要的舞台是网络工程中的后端，据说 bilibili 的网站服务器就是使用 go 语言编写的。网络后端生态位主要就是 go 、 Java 和 php 三种语言，而 php 的工程性太弱， Java 太老，所以从这个方面来看， go 语言还是具有比较美好的前景的。这里是<a href=\"https://golang.google.cn/\">他们的官网</a>。",
  "ideo_sql": "SQL",
  "ideo_sql_desc": "SQL 是一种关系型数据库（也就是类似 Excel 那样数据一条一条的数据库）的查询语言，但它提供的功能过多，以至于你可以洋洋洒洒地写下几页数据库查询代码来代替服务器后台由其他语言实现的逻辑。尤其是其恰到好处的功能繁杂和恰到好处的语法简略，能沉浸其中享受其乐趣的人少之又少，和同普通编程语言相比非常丧心病狂。只使用最低限度的 SQL 完全是可以的，以至于实际上大多数网络公司都只使用最低限度的 SQL 来保证可维护性（为什么还不能彻底把这东西扔走），但如果你希望给自己增加有趣（实际上可能一点也不有趣）且困难的难题，使用 SQL 是你非常好的选择！",
  "ideo_vb": "Visual Basic",
  "ideo_vb_desc": "如果你不知道 VB 是什么语言，你应该知道 BASIC 语言，那是你爸妈辈的人会学的神秘的古老而原始的技艺。本身这个古老语言就已经不适合现代人进行编写，而微软在 BASIC 上增加的图形界面功能以及各种不断的大刀阔斧的更新则是把这个黏糊糊的东西彻底推出人类社会——且慢！你应该知道不太讨喜的微软公司会在操作系统里绑定 IE 浏览器，那你知道微软也会在 Excel 等软件里让你使用 VBA 和 VBS 等 VB 语言的子女吗？没错，如果你觉得生活过于顺利或者人生过于成功，微软还是有提供一个这样的平台让你挑战自我的。",
  "ideo_fortran": "FORTRAN / Fortran",
  "ideo_fortran_desc": "Fortran ，多用在各种科学计算和祖传老代码等领域，所以其兼容性很强，不论是偏工程的命令式风格还是偏学术的函数式风格，它都能驾驭。为了保证代码的正确性， Fortran 也通过强类型系统来约束代码。 Fortran 是世界上第一个高级计算机语言，最早在 1957 年被提出，而 Fortran 90 标准直到现在也仍然被广泛使用，历史非常悠久。其名字来源于 Formula Translation 也就是公式转换语言，用它的多是理论学者。以上四点分别对应你之前选择的选项。<br>虽说其与时俱进（因为不论哪个时代，都有 Fortran 代码需要维护），添加了很多新时代的特性，但总体来说，它在学术领域的地位仍然是慢慢在被如 Python 这样的语言夺走。然而其与 Python 的风格大为不同，尤其是在函数式风格方面。究竟是选择更有可能适合你性格的 Fortran ，还是跟随时代选择 Python ，你可以仔细考虑考虑。",
  "ideo_asm": "汇编",
  "ideo_asm_desc": "汇编语言你可能没听说过，但是你听过用电话线连电脑，按 0 和 1 来手写程序的段子吗？没错，使用汇编编写程序跟手写 0 和 1 基本没有区别。汇编不是一种高级语言，其实际上是一种符号。比如在 x86 架构的 16 位 CPU 中， <code>ADD BP,BX</code> 就表示二进制指令 <code>0000000111011101</code> ，其中前八位就是 <code>ADD</code> ，表示加法。不同设备使用的汇编代码也不同。在现在的时代，手写汇编代码一般是为了炫技、探寻计算机底层原理、或得到极致的手工性能优化。",
  "ideo_php": "php",
  "ideo_php_desc": "首先，请跟我一起读：“ php 是世界上最好的语言！”<br>php 是一个神奇的语言，不论你是喜欢偏向直接了当的命令式代码，还是更有描述性的函数式代码，它都可以满足你。同时，编写 php 唯一需要的就是灵感，几乎没有任何类型系统层面的限制来强制你写出诸如“正确”“高效”……那些陈词滥调的的程序，完全可以自由地发挥。虽然 php 在互联网的早期就被用作编写网络后端服务器，一直有人说 php 要被某些竞争对手所“灭亡”，但直到现在它仍然在积极的引入各种新的语言特性，显现一副勃勃生机、跳来跳去的样子。在此基础上，其各种历史遗留写法导致你可以彻底在语法层面放飞自我，写出类似狗屎但作为作者的你可以理解其美丽优雅的代码。以上四点分别对应你之前选择的选项。<br>说 php 是世界上最好的编程语言可能会有非常多的人反对，但说 php 是世界上最具有广泛戏剧效果的编程语言，可能很少有人能提出反对意见。想学习 php 不需要有任何负担，现在去百度上随便搜点教程，你就能开始写出大家都会写出的漂亮代码了。然而目前来说他的就业前景不是那么好——这也不是坏事，因为 1 个写 php 的人就能代替 3 个写 Java 的人， php 的开发效率太高了。",
  "ideo_rust": "Rust",
  "ideo_rust_desc": "恭喜，目前编程领域最出风头的语言，一个<a href=\"https://k.sina.com.cn/article_1746173800_68147f68019019fu3.html\">连美国总统拜登都支持</a>的语言，是被测试为最符合你的语言。<br>作为标榜自己现代且具有学术正确性的语言， Rust 在 C++ 等系统级语言直截了当的命令式风格中添加了非常大量的偏描述性的函数式编程口味，请你任选。同时， Rust 毫无疑问地认为程序员写出高效，正确的代码是编程的要务，所以它有非常严格且复杂的各种如类型系统检查、借用检查、格式检查等约束工具，让你的代码高效且安全，直到重构那天都不需要再对它进行改动——它不会出问题的（但你可能需要经常重构）。毫无疑问，它是个新秀， 2025 年 5 月 15 日才过完它的 10 岁生日，这也意味着它具有大量现代——或者很多人口中的反人类——的用法和结构。它过于正确，没有能够让你把内存随便乱扔的垃圾回收器等设计，以至于它现在的主要用途是和系统底层直接对话，更加贴近物理现实。以上四点分别对应你之前选择的选项。<br>如果你觉得这个语言非常合你的胃口，你可以去 <a href=\"https://rust-lang.org/\">Rust 的官网</a>寻找学习资料。",
  "ideo_ruby": "Ruby",
  "ideo_ruby_desc": "Ruby 的宗旨是使人编写感到愉悦，所以不论是直接了当的命令式代码，还是更具有描述性的函数式代码，都是你可以编写的。除此之外，为了使你更舒适地编写，也是 Ruby 社区奉行“干一件事可以有多种不同方法”，它没有严格的类型检查来强制你编写诸如号称“正确”或“安全”的代码，使你更加自由。然而，在其网站后端服务器的生态位来看，它的理念是稍微更加传统，有年代感的。它的语法也是非常自由，随性，讲究自然。以上四点分别对应你之前选择的选项。<br>Ruby 虽然目前身处这些编程语言中并不是那么亮眼了，但它所带来的很多概念，如包管理和灵活性，都启发了现在的这些编程语言。可以说， Ruby 不是一种语言，而是一种态度。如果你感觉能对的上它的电波，可以<a href=\"https://www.ruby-lang.org/zh_cn/\">去他们的官网</a>详细了解。",
  "ideo_kotlin": "Kotlin",
  "ideo_kotlin_desc": "Kotlin 可以理解为更现代的 Java ，而现代比较流行偏描述性的函数式编程，所以它除了 Java 的直截了当的命令式，你若想用，也可以用函数式代码编写程序。和 Java 一样， Kotlin 也是一个面向对象语言，为它带来了强大的类型约束，让你写出准确而不过于灵活的代码。虽然说它声称自己更加现代，但其仍然依附于 Java 工具链，如果你不喜欢 Java 这种较为传统的语言，你可能基本不会对它感兴趣。同样与 Java 类似，它更多用在工程方面而非理论方面，如安卓应用开发等。以上四点分别对应你之前选择的选项。<br>如果你想了解更多关于它的信息，可以去<a href=\"https://kotlinlang.org/\">官网</a>详细了解。",
  "ideo_prolog": "Prolog / Lean / Haskell",
  "ideo_prolog_desc": "你就适合一阶谓词逻辑编程语言或者基于类型论的形式化验证和数学证明辅助语言，要么就是带有非限定性语义和强静态类型的函数式编程语言。欸，你知道 Haskell 里的单子就是自函子范畴上的一个幺半群吗？其组合运算是两个自函子的组合 F.F 到一个自函子 F 的自然变换 μ ，其单位态射是恒等函子 Id 到自函子 F 的自然变换 η 。这个幺半群的单位态射就是 Haskell 中类单子的 return 函数；而这个幺半群的组合则是 Haskell 中类单子的 join 函数。二者都是一个自然变换。你懂我的意思，对吧。",
  "ideo_verilog": "Verilog",
  "ideo_verilog_desc": "注意，这不是一个编程语言，而是一个硬件描述语言——它用于描述计算机底层硬件。想了解它，请先阅读《计算机组成原理（第七版）》，了解其前置知识。",
  "ideo_haskell": "Haskell",
  "ideo_haskell_desc": "haskell",
  "ideo_commmon lisp": "Commmon Lisp",
  "ideo_commmon _desclisp": "commmon lisp",
  "ideo_elisp": "Elisp",
  "ideo_elisp_desc": "elisp",
  "ideo_lua": "Lua",
  "ideo_lua_desc": "lua",
  "ideo_ocaml": "OCaml",
  "ideo_ocaml_desc": "ocaml",
  "ideo_bash": "bash",
  "ideo_bash_desc": "bash 和 sh 等",
  "ideo_zig": "Zig",
  "ideo_zig_desc": "zig",
  "btn_former": "前者",
  "btn_latter": "后者",
  "btn_harder": "不，还不够难",
  "btn_both": "看情况",
  "btn_easy": "简单",
  "btn_medium": "中等",
  "btn_hard": "困难"
}
